from aiogram import Router, F
from aiogram.filters import CommandStart, Command
from aiogram.types import Message
from aiogram.fsm.context import FSMContext
from gigachat import GigaChat
from app.states import AI
from config import AI_TOKEN
from gigachat.models import Chat, Messages, MessagesRole
from app.keyboard import klav
from datetime import datetime
from sqlalchemy.future import select
from sqlalchemy.ext.asyncio import AsyncSession
from app.database.models import User, Task, async_session
import datetime as dt
import pytz


router = Router()
last_start_time = dt.datetime.now(pytz.utc)
user_last_message_time = {}
query_count = 0
dictionary = {'–ò–∑—É—á–∏—Ç—å —Ç–µ–º—Éüìö': '–ø—Ä–µ–¥–æ—Å—Ç–∞–≤—å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –ø–æ —Ç–∞–∫–æ–π —Ç–µ–º–µ –º–∞–∫—Å–∏–º–∞–ª—å–Ω–æ –ø–æ–Ω—è—Ç–Ω–æ:',
              '–ü—Ä–µ–¥–ª–æ–∂–∏—Ç—å –∏–¥–µ—éüí°': '–ø—Ä–µ–¥–ª–æ–∂–∏ –ø–æ —Ç–∞–∫–æ–º—É –∑–∞–ø—Ä–æ—Å—É –º–∞–∫—Å–∏–º–∞–ª—å–Ω–æ —Ä–µ–∞–ª–∏—Å—Ç–∏—á–Ω—É—é –∏–¥–µ—é:',
              '–†–µ—à–∏—Ç—å –∑–∞–¥–∞—á—Éü§î': '—Ä–µ—à–∏ –º–∞–∫–∏—Å–º–∞–ª—å–Ω–æ –ø—Ä–∞–≤–∏–ª—å–Ω–æ –∏ –ø—Ä–∞–≤–¥–∞–ø–æ–¥–æ–±–Ω–æ –¥–∞–Ω–Ω—É—é –∑–∞–¥–∞—á—É:',
              '–û—Ç–≤–µ—Ç–∏—Ç—å –Ω–∞ –≤–æ–ø—Ä–æ—Å‚ùì': '–æ—Ç–≤–µ—Ç—å –º–∞–∫—Å–∏–º–∞–ª—å–Ω–æ –ø–æ–Ω—è—Ç–Ω–æ –∏ –ø—Ä–∞–≤–∏–ª—å–Ω–æ –Ω–∞ —Å–ª–µ–¥—É—é—â–∏–π –≤–æ–ø—Ä–æ—Å:'}
key = ''
def is_message_old(message: Message) -> bool:
    message_time = message.date.replace(tzinfo=pytz.utc)
    return message_time < last_start_time

def is_spam(message: Message) -> bool:
    user_id = message.from_user.id
    current_time = dt.datetime.now(pytz.utc)
    last_message_time = user_last_message_time.get(user_id)
    if last_message_time is None:
        user_last_message_time[user_id] = current_time
        return False
    if (current_time - last_message_time).total_seconds() < 5:
        return True
    user_last_message_time[user_id] = current_time
    return False

chatik = Chat(
        messages=[Messages(role=MessagesRole.SYSTEM,
                           content='–¢—ã –≤ —Ä–æ–ª–∏ –∫–æ—Ç–∞-–∞—Å—Å–∏—Å—Ç–µ–Ω—Ç–∞ –ø–æ –∏–º–µ–Ω–∏ –®–∏–∑–∏, –∫–æ—Ç–æ—Ä—ã–π –ø–æ–º–æ–≥–∞–µ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º '
                                   '–∏–ª–∏ –∫–æ–º–∞–Ω–¥–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π —Ä–µ—à–∞—Ç—å –∏—Ö –∑–∞–¥–∞—á–∏, –∫–æ—Ç–æ—Ä—ã–µ –æ–Ω–∏ —Ç–µ–±–µ –ø–∏—à—É—Ç –≤ –∑–∞–ø—Ä–æ—Å–µ')])

async def get_user(session: AsyncSession, user_name: str):
    result = await session.execute(select(User).filter_by(name=user_name))
    return result.scalars().first()

async def get_tasks(session: AsyncSession, user_id: int):
    result = await session.execute(select(Task).filter_by(user_id=user_id))
    return result.scalars().all()

async def get_all_tasks(session: AsyncSession):
    result = await session.execute(select(Task))
    return result.scalars().all()

async def get_all_users(session: AsyncSession):
    result = await session.execute(select(User))
    return result.scalars().all()

@router.message(CommandStart())
async def cmd_start(message: Message):
    if is_message_old(message):
        return
    if is_spam(message):
        await message.answer('–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –Ω–µ —Å–ø–∞–º—å—Ç–µ! –ü–æ–¥–æ–∂–¥–∏—Ç–µ 5 —Å–µ–∫—É–Ω–¥ –ø–µ—Ä–µ–¥ –æ—Ç–ø—Ä–∞–≤–∫–æ–π —Å–ª–µ–¥—É—é—â–µ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è.', reply_markup=klav)
        return
    text = '–ú–µ–Ω—è —Ä–∞–∑—Ä–∞–±–æ—Ç–∞–ª: <a href="https://t.me/Mandan27">Mandan27</a>'
    await message.answer('–ü—Ä–∏–≤–µ—Ç, —è –®–∏–∑–∏ - —Ç–≤–æ–π –ø—É—à–∏—Å—Ç—ã–π –ø–æ–º–æ—à–Ω–∏–∫ –¥–ª—è —Ç–≤–æ–∏—Ö –∑–∞–¥–∞—á!üê±')

    await message.answer('–ö—Ä–∞—Ç–∫–æ –æ —Ñ—É–Ω–∫—Ü–∏–æ–Ω–∞–ª–µ:\n‚¨ÖÔ∏è –°–ª–µ–≤–∞ –º–µ–Ω—é –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å –ø–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫–æ–º –∑–∞–¥–∞—á, –æ—Å–Ω–æ–≤–∞–Ω–Ω—ã–π –Ω–∞ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö "SQLAlchemy"üíø'
                         '(–≤ –≥—Ä—É–ø–ø–µ –≤–≤–µ–¥–∏ —Å–ª—ç—à "/")\n‚û°Ô∏è'
                         ' –°–ø—Ä–∞–≤–∞ –∫–ª–∞–≤–∏–∞—Ç—É—Ä–∞ –¥–ª—è –≤–∞–∑–∏–º–æ–¥–µ–π—Å—Ç–≤–∏—è —Å–æ –º–Ω–æ–π(—Ç–∞–∫–∂–µ –º–æ–∂–µ—à—å –ø–∏—Å–∞—Ç—å –¥—Ä—É–≥–∏–µ –¥–µ–π—Å—Ç–≤–∏—è –ø—Ä–∏ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ—Å—Ç–∏)üêæ\n'
                         '–ñ–¥—É —Ç–≤–æ–µ–≥–æ –∑–∞–ø—Ä–æ—Å–∞!‚úèÔ∏è')
    await message.answer('–¢–∞–∫–∂–µ –Ω–µ –∑–∞–±—ã–≤–∞–π —á–µ—Å—Ç–µ–Ω—å–∫–æ –æ—á–∏—â–∞—Ç—å –ø–∞–º—è—Ç—å, –Ω–∞–∂–∞–≤ –Ω–∞ –∫–ª–∞–≤–∏–∞—É—Ä–µ –∫–ø–æ–ø–∫—É \"–û—á–∏—Å—Ç–∏—Ç—å –ø–∞–º—è—Ç—åüß†\".'
                         ' –¢–∞–∫ —Ç—ã –±—É–¥–µ—à—å —ç–∫–æ–Ω–æ–º–∏—Ç—å —Ç–æ–∫–µ–Ω—ã –∞–≤—Ç–æ—Ä–∞ –∏ —É–ª—É—á—à–∞—Ç—å –∫–∞—á–µ—Å—Ç–≤–æ –¥–∏–∞–ª–æ–≥–∞.'
                         ' –ï—Å–ª–∏ —É –º–µ–Ω—è –±—É–¥–µ—Ç –±–æ–ª—å—à–µ 10 –∑–∞–ø—Ä–æ—Å–æ–≤ –≤ –ø–∞–º—è—Ç–∏ –∫ –º–æ–µ–º—É –ò–ò —è –±—É–¥—É —Ç–µ–±–µ –æ–± —ç—Ç–æ–º –Ω–∞–ø–æ–º–∏–Ω–∞—Ç—å –∫–∞–∂–¥—ã–π –∑–∞–ø—Ä–æ—Å!üß∂')
    await message.answer(text, parse_mode='HTML', reply_markup=klav)

@router.message(Command('add'))
async def cmd_add(message: Message):
    if is_message_old(message):
        return
    if is_spam(message):
        await message.answer('–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –Ω–µ —Å–ø–∞–º—å—Ç–µ! –ü–æ–¥–æ–∂–¥–∏—Ç–µ 5 —Å–µ–∫—É–Ω–¥ –ø–µ—Ä–µ–¥ –æ—Ç–ø—Ä–∞–≤–∫–æ–π —Å–ª–µ–¥—É—é—â–µ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è.', reply_markup=klav)
        return
    try:
        parts = message.text.split(', ')
        user_name = parts[0].replace('/add ', '')
        description = parts[1]
        task_date = datetime.strptime(parts[2], '%d.%m.%Y').date()

        async with async_session() as session:
            user = await get_user(session, user_name)
            if not user:
                user = User(name=user_name)
                session.add(user)
                await session.commit()

            task = Task(description=description, date=task_date, user_id=user.id)
            session.add(task)
            await session.commit()
            await message.reply(f"–ó–∞–¥–∞—á–∞ –¥–æ–±–∞–≤–ª–µ–Ω–∞: {description} –Ω–∞ {task_date}", reply_markup=klav)
    except Exception as e:
        await message.reply(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –¥–æ–±–∞–≤–ª–µ–Ω–∏–∏ –∑–∞–¥–∞—á–∏: {e}", reply_markup=klav)


@router.message(Command('view'))
async def cmd_view(message: Message):
    if is_message_old(message):
        return
    if is_spam(message):
        await message.answer('–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –Ω–µ —Å–ø–∞–º—å—Ç–µ! –ü–æ–¥–æ–∂–¥–∏—Ç–µ 5 —Å–µ–∫—É–Ω–¥ –ø–µ—Ä–µ–¥ –æ—Ç–ø—Ä–∞–≤–∫–æ–π —Å–ª–µ–¥—É—é—â–µ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è.', reply_markup=klav)
        return
    user_name = message.text.replace('/view ', '')
    async with async_session() as session:
        user = await get_user(session, user_name)
        if not user:
            await message.reply("–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω.", reply_markup=klav)
            return

        tasks = await get_tasks(session, user.id)
        if not tasks:
            await message.reply("–ó–∞–¥–∞—á–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω—ã.", reply_markup=klav)
            return

        task_list = '\n'.join([f"{task.description} –Ω–∞ {task.date}" for task in tasks])
        await message.reply(f"–ó–∞–¥–∞—á–∏ –¥–ª—è {user_name}:\n{task_list}", reply_markup=klav)


@router.message(Command('view_all'))
async def cmd_view_all(message: Message):
    if is_message_old(message):
        return
    if is_spam(message):
        await message.answer('–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –Ω–µ —Å–ø–∞–º—å—Ç–µ! –ü–æ–¥–æ–∂–¥–∏—Ç–µ 5 —Å–µ–∫—É–Ω–¥ –ø–µ—Ä–µ–¥ –æ—Ç–ø—Ä–∞–≤–∫–æ–π —Å–ª–µ–¥—É—é—â–µ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è.', reply_markup=klav)
        return
    async with async_session() as session:
        tasks = await get_all_tasks(session)
        if not tasks:
            await message.reply("–ù–µ—Ç –∑–∞–¥–∞—á –≤ —Å–∏—Å—Ç–µ–º–µ.", reply_markup=klav)
            return

        task_list = '\n'.join([f"ID: {task.id}, –û–ø–∏—Å–∞–Ω–∏–µ: {task.description}, –î–∞—Ç–∞: {task.date}" for task in tasks])
        await message.reply(f"–í—Å–µ –∑–∞–¥–∞—á–∏:\n{task_list}", reply_markup=klav)


@router.message(Command('update'))
async def cmd_update(message: Message):
    if is_message_old(message):
        return
    if is_spam(message):
        await message.answer('–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –Ω–µ —Å–ø–∞–º—å—Ç–µ! –ü–æ–¥–æ–∂–¥–∏—Ç–µ 5 —Å–µ–∫—É–Ω–¥ –ø–µ—Ä–µ–¥ –æ—Ç–ø—Ä–∞–≤–∫–æ–π —Å–ª–µ–¥—É—é—â–µ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è.', reply_markup=klav)
        return
    try:
        parts = message.text.split(', ')
        task_id = int(parts[0].replace('/update ', ''))
        description = parts[1]
        task_date = datetime.strptime(parts[2], '%d.%m.%Y').date()

        async with async_session() as session:
            task = await session.get(Task, task_id)
            if not task:
                await message.reply("–ó–∞–¥–∞—á–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞.", reply_markup=klav)
                return

            task.description = description
            task.date = task_date
            await session.commit()
            await message.reply(f"–ó–∞–¥–∞—á–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∞: {description} –Ω–∞ {task_date}", reply_markup=klav)
    except Exception as e:
        await message.reply(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ –∑–∞–¥–∞—á–∏: {e}", reply_markup=klav)


@router.message(Command('delete'))
async def cmd_delete(message: Message):
    if is_message_old(message):
        return
    if is_spam(message):
        await message.answer('–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –Ω–µ —Å–ø–∞–º—å—Ç–µ! –ü–æ–¥–æ–∂–¥–∏—Ç–µ 5 —Å–µ–∫—É–Ω–¥ –ø–µ—Ä–µ–¥ –æ—Ç–ø—Ä–∞–≤–∫–æ–π —Å–ª–µ–¥—É—é—â–µ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è.', reply_markup=klav)
        return
    try:
        task_id = int(message.text.replace('/delete ', ''))

        async with async_session() as session:
            task = await session.get(Task, task_id)
            if not task:
                await message.reply("–ó–∞–¥–∞—á–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞.", reply_markup=klav)
                return

            await session.delete(task)
            await session.commit()
            await message.reply("–ó–∞–¥–∞—á–∞ —É–¥–∞–ª–µ–Ω–∞.", reply_markup=klav)
    except Exception as e:
        await message.reply(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏ –∑–∞–¥–∞—á–∏: {e}", reply_markup=klav)


@router.message(Command('list_users'))
async def cmd_list_users(message: Message):
    if is_message_old(message):
        return
    if is_spam(message):
        await message.answer('–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –Ω–µ —Å–ø–∞–º—å—Ç–µ! –ü–æ–¥–æ–∂–¥–∏—Ç–µ 5 —Å–µ–∫—É–Ω–¥ –ø–µ—Ä–µ–¥ –æ—Ç–ø—Ä–∞–≤–∫–æ–π —Å–ª–µ–¥—É—é—â–µ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è.', reply_markup=klav)
        return
    async with async_session() as session:
        users = await get_all_users(session)
        if not users:
            await message.reply("–ù–µ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –≤ —Å–∏—Å—Ç–µ–º–µ.", reply_markup=klav)
            return

        user_list = '\n'.join([f"ID: {user.id}, –ò–º—è: {user.name}" for user in users])
        await message.reply(f"–í—Å–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏:\n{user_list}", reply_markup=klav)

@router.message(Command('delete_user'))
async def cmd_delete_user(message: Message):
    if is_message_old(message):
        return
    if is_spam(message):
        await message.answer('–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –Ω–µ —Å–ø–∞–º—å—Ç–µ! –ü–æ–¥–æ–∂–¥–∏—Ç–µ 5 —Å–µ–∫—É–Ω–¥ –ø–µ—Ä–µ–¥ –æ—Ç–ø—Ä–∞–≤–∫–æ–π —Å–ª–µ–¥—É—é—â–µ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è.', reply_markup=klav)
        return
    try:
        user_id = int(message.text.replace('/delete_user ', ''))

        async with async_session() as session:
            user = await session.get(User, user_id)
            if not user:
                await message.reply("–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω.", reply_markup=klav)
                return

            tasks = await get_tasks(session, user_id)
            for task in tasks:
                await session.delete(task)

            await session.delete(user)
            await session.commit()
            await message.reply(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Å ID {user_id} —É–¥–∞–ª—ë–Ω.", reply_markup=klav)
    except Exception as e:
        await message.reply(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è: {e}", reply_markup=klav)

@router.message(Command('delete_all_tasks'))
async def cmd_delete_all_tasks(message:Message):
    if is_message_old(message):
        return
    if is_spam(message):
        await message.answer('–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –Ω–µ —Å–ø–∞–º—å—Ç–µ! –ü–æ–¥–æ–∂–¥–∏—Ç–µ 5 —Å–µ–∫—É–Ω–¥ –ø–µ—Ä–µ–¥ –æ—Ç–ø—Ä–∞–≤–∫–æ–π —Å–ª–µ–¥—É—é—â–µ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è.', reply_markup=klav)
        return
    try:
        async with async_session() as session:
            tasks = await get_all_tasks(session)
            for task in tasks:
                await session.delete(task)
            await session.commit()
            await message.reply("–í—Å–µ –∑–∞–¥–∞—á–∏ —É–¥–∞–ª–µ–Ω—ã.", reply_markup=klav)
    except Exception as e:
        await message.reply(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏ –∑–∞–¥–∞—á: {e}", reply_markup=klav)

@router.message(Command('delete_all_users'))
async def cmd_delete_all_users(message: Message):
    if is_message_old(message):
        return
    if is_spam(message):
        await message.answer('–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –Ω–µ —Å–ø–∞–º—å—Ç–µ! –ü–æ–¥–æ–∂–¥–∏—Ç–µ 5 —Å–µ–∫—É–Ω–¥ –ø–µ—Ä–µ–¥ –æ—Ç–ø—Ä–∞–≤–∫–æ–π —Å–ª–µ–¥—É—é—â–µ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è.', reply_markup=klav)
        return
    try:
        async with async_session() as session:
            users = await get_all_users(session)
            for user in users:
                tasks = await get_tasks(session, user.id)
                for task in tasks:
                    await session.delete(task)
                await session.delete(user)
            await session.commit()
            await message.reply("–í—Å–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏ –∏ –∏—Ö –∑–∞–¥–∞—á–∏ —É–¥–∞–ª–µ–Ω—ã.", reply_markup=klav)
    except Exception as e:
        await message.reply(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π: {e}", reply_markup=klav)

@router.message(Command('help'))
async def cmd_help(message: Message):
    if is_message_old(message):
        return
    if is_spam(message):
        await message.answer('–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –Ω–µ —Å–ø–∞–º—å—Ç–µ! –ü–æ–¥–æ–∂–¥–∏—Ç–µ 5 —Å–µ–∫—É–Ω–¥ –ø–µ—Ä–µ–¥ –æ—Ç–ø—Ä–∞–≤–∫–æ–π —Å–ª–µ–¥—É—é—â–µ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è.', reply_markup=klav)
        return
    help_text = (
        "–ö–æ–º–∞–Ω–¥—ã –¥–ª—è –≤–∑–∞–∏–º–æ–¥–µ–π—Å—Ç–≤–∏—è —Å –±–∞–∑–æ–π –¥–∞–Ω–Ω—ã—Ö:\n\n"
        "add [–ò–º—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è], [–û–ø–∏—Å–∞–Ω–∏–µ –∑–∞–¥–∞—á–∏], [–î–∞—Ç–∞]\n"
        "–ü—Ä–∏–º–µ—Ä: add –ò–≤–∞–Ω, –≤—ã—Ç–µ—Ä–µ—Ç—å –ø–æ–ª, 16.12.2024\n\n"
        "view [–ò–º—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è]\n"
        "–ü—Ä–∏–º–µ—Ä: view –ò–≤–∞–Ω\n\n"
        "view_all\n"
        "–ü—Ä–∏–º–µ—Ä: view_all\n\n"
        "update [ID –∑–∞–¥–∞—á–∏], [–ù–æ–≤–æ–µ –æ–ø–∏—Å–∞–Ω–∏–µ –∑–∞–¥–∞—á–∏], [–ù–æ–≤–∞—è –¥–∞—Ç–∞]\n"
        "–ü—Ä–∏–º–µ—Ä: update 1, –≤—ã–º—ã—Ç—å –æ–∫–Ω–∞, 20.12.2024\n\n"
        "delete [ID –∑–∞–¥–∞—á–∏]\n"
        "–ü—Ä–∏–º–µ—Ä: delete 1\n\n"
        "list_users\n"
        "–ü—Ä–∏–º–µ—Ä: list_users\n\n"
        "delete_user [ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è]\n"
        "–ü—Ä–∏–º–µ—Ä: delete_user 1\n\n"
        "delete_all_tasks\n"
        "–ü—Ä–∏–º–µ—Ä: delete_all_tasks\n\n"
        "delete_all_users\n"
        "–ü—Ä–∏–º–µ—Ä: delete_all_users\n"
    )
    await message.reply(help_text, reply_markup=klav)


@router.message(F.text == '–ò–∑—É—á–∏—Ç—å —Ç–µ–º—Éüìö')
async def word_1(message: Message):
    if is_message_old(message):
        return
    if is_spam(message):
        await message.answer('–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –Ω–µ —Å–ø–∞–º—å—Ç–µ! –ü–æ–¥–æ–∂–¥–∏—Ç–µ 5 —Å–µ–∫—É–Ω–¥ –ø–µ—Ä–µ–¥ –æ—Ç–ø—Ä–∞–≤–∫–æ–π —Å–ª–µ–¥—É—é—â–µ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è.', reply_markup=klav)
    global key
    key = message.text
    await message.answer(f'–≤—ã –≤—ã–±—Ä–∞–ª–∏ –¥–µ–π—Å—Ç–≤–∏–µ: {key}', reply_markup=klav)

@router.message(F.text == '–ü—Ä–µ–¥–ª–æ–∂–∏—Ç—å –∏–¥–µ—éüí°')
async def word_1(message: Message):
    if is_message_old(message):
        return
    if is_spam(message):
        await message.answer('–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –Ω–µ —Å–ø–∞–º—å—Ç–µ! –ü–æ–¥–æ–∂–¥–∏—Ç–µ 5 —Å–µ–∫—É–Ω–¥ –ø–µ—Ä–µ–¥ –æ—Ç–ø—Ä–∞–≤–∫–æ–π —Å–ª–µ–¥—É—é—â–µ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è.', reply_markup=klav)
    global key
    key = message.text
    await message.answer(f'–≤—ã –≤—ã–±—Ä–∞–ª–∏ –¥–µ–π—Å—Ç–≤–∏–µ: {key}', reply_markup=klav)

@router.message(F.text == '–†–µ—à–∏—Ç—å –∑–∞–¥–∞—á—Éü§î')
async def word_1(message: Message):
    if is_message_old(message):
        return
    if is_spam(message):
        await message.answer('–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –Ω–µ —Å–ø–∞–º—å—Ç–µ! –ü–æ–¥–æ–∂–¥–∏—Ç–µ 5 —Å–µ–∫—É–Ω–¥ –ø–µ—Ä–µ–¥ –æ—Ç–ø—Ä–∞–≤–∫–æ–π —Å–ª–µ–¥—É—é—â–µ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è.', reply_markup=klav)
    global key
    key = message.text
    await message.answer(f'–≤—ã –≤—ã–±—Ä–∞–ª–∏ –¥–µ–π—Å—Ç–≤–∏–µ: {key}', reply_markup=klav)

@router.message(F.text == '–û—Ç–≤–µ—Ç–∏—Ç—å –Ω–∞ –≤–æ–ø—Ä–æ—Å‚ùì')
async def word_1(message: Message):
    if is_message_old(message):
        return
    if is_spam(message):
        await message.answer('–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –Ω–µ —Å–ø–∞–º—å—Ç–µ! –ü–æ–¥–æ–∂–¥–∏—Ç–µ 5 —Å–µ–∫—É–Ω–¥ –ø–µ—Ä–µ–¥ –æ—Ç–ø—Ä–∞–≤–∫–æ–π —Å–ª–µ–¥—É—é—â–µ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è.', reply_markup=klav)
    global key
    key = message.text
    await message.answer(f'–≤—ã –≤—ã–±—Ä–∞–ª–∏ –¥–µ–π—Å—Ç–≤–∏–µ: {key}', reply_markup=klav)

@router.message(F.text == '–û—á–∏—Å—Ç–∏—Ç—å –ø–∞–º—è—Ç—åüß†')
async def clear(message: Message):
    if is_message_old(message):
        return
    if is_spam(message):
        await message.answer('–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –Ω–µ —Å–ø–∞–º—å—Ç–µ! –ü–æ–¥–æ–∂–¥–∏—Ç–µ 5 —Å–µ–∫—É–Ω–¥ –ø–µ—Ä–µ–¥ –æ—Ç–ø—Ä–∞–≤–∫–æ–π —Å–ª–µ–¥—É—é—â–µ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è.', reply_markup=klav)
        return
    chatik.messages = [Messages(role=MessagesRole.SYSTEM,
                               content='–¢—ã –≤ —Ä–æ–ª–∏ –∫–æ—Ç–∞-–∞—Å—Å–∏—Å—Ç–µ–Ω—Ç–∞ –ø–æ –∏–º–µ–Ω–∏ –®–∏–∑–∏, –∫–æ—Ç–æ—Ä—ã–π –ø–æ–º–æ–≥–∞–µ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º '
                                       '–∏–ª–∏ –∫–æ–º–∞–Ω–¥–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π —Ä–µ—à–∞—Ç—å –∏—Ö –∑–∞–¥–∞—á–∏, –∫–æ—Ç–æ—Ä—ã–µ –æ–Ω–∏ —Ç–µ–±–µ –ø–∏—à—É—Ç –≤ –∑–∞–ø—Ä–æ—Å–µ')]
    global query_count
    query_count = 0
    await message.answer('–ü–∞–º—è—Ç—å –æ—á–∏—â–µ–Ω–∞!', reply_markup=klav)

@router.message(AI.answer)
async def answer(message: Message):
    await message.answer('–ü–æ–¥–æ–∂–¥–∏, –µ—â—ë –Ω–µ –æ—Ç–≤–µ—Ç–∏–ª –Ω–∞ –ø—Ä–µ–¥—ã–¥—É—â–∏–π –≤–æ–ø—Ä–æ—Å!‚åõ', reply_markup=klav)

@router.message(F.text)
async def gigachatka(message: Message, state: FSMContext):

    if is_message_old(message):
        return
    if is_spam(message):
        await message.answer('–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –Ω–µ —Å–ø–∞–º—å—Ç–µ! –ü–æ–¥–æ–∂–¥–∏—Ç–µ 5 —Å–µ–∫—É–Ω–¥ –ø–µ—Ä–µ–¥ –æ—Ç–ø—Ä–∞–≤–∫–æ–π —Å–ª–µ–¥—É—é—â–µ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è.', reply_markup=klav)
        return
    await state.set_state(AI.answer)
    with GigaChat(credentials=AI_TOKEN, verify_ssl_certs=False) as giga:
        global dictionary, key, query_count
        if key:
            chatik.messages.append(Messages(role=MessagesRole.USER, content=f'{dictionary[key]} {message.text}'))
        else:
            chatik.messages.append(Messages(role=MessagesRole.USER, content=message.text))
        query_count += 1
        await message.answer(f'–ó–∞–ø—Ä–æ—Å ‚Ññ{query_count} –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω!üêà‚Äç', reply_markup=klav)
        if query_count >= 10:
            await message.answer(f'–£ –º–µ–Ω—è {query_count} –∑–∞–ø—Ä–æ—Å–æ–≤ –≤ –ø–∞–º—è—Ç–∏.'
                                 '\n–†–µ–∫–æ–º–µ–Ω–¥—É—é –æ—á–∏—Å—Ç–∏—Ç—å –µ—ë –¥–ª—è —ç–∫–æ–Ω–æ–º–∏–∏ —Ç–æ–∫–µ–Ω–æ–≤ –∏ –æ–ø—Ç–∏–º–∏–∑–∞—Ü–∏–∏ —Ä–∞–±–æ—Ç—ã!üê±', reply_markup=klav)
        response = giga.chat(chatik)
        chatik.messages.append(response.choices[0].message)
    return await message.answer(response.choices[0].message.content), await state.clear()

async def on_startup():
    global last_start_time
    last_start_time = dt.datetime.now(pytz.utc)